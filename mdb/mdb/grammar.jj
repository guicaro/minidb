// Automatically generated code.  Edit at your own risk!
// Generated by bali2javacc v2002.09.04.

//-----------------------------------//
// Options block:
//-----------------------------------//

// No options blocks defined in Bali grammar.

//-----------------------------------//
// Parser code block:
//-----------------------------------//

PARSER_BEGIN(BaliParser)

package mdb ;

public class BaliParser {

    private static SqlLang parseRoot = null ;

    public static SqlLang getStartRoot () {
        return parseRoot ;
    }

    public static SqlLang getStartRoot (BaliParser parser)
    throws ParseException {
        try {
            parseRoot = parser.SqlLang () ;
            parser.requireEOF () ;
            return parseRoot ;
        } catch (TokenMgrError error) {
            ParseException e = new ParseException 
            ("token error occurred") ;
            e.initCause (error) ;
            throw e ;
        }
    }

    // Wraps an optional node around an AstNode:
    //
    static AstOptNode opt (AstNode node) {
        return new AstOptNode () . setParms (node) ;
    }
    
    // Wraps an optional node around an AstToken:
    //
    static AstOptToken opt (AstToken token) {
        return new AstOptToken () . setParms (token) ;
    }
    
    // Forces an end-of-file check in the tokenStream:
    //
    public void requireEOF () throws ParseException {
        try {
            jj_consume_token (BaliParserConstants.EOF) ;
        } catch (TokenMgrError error) {
            ParseException e = new ParseException ("EOF error") ;
            e.initCause (error) ;
            throw e ;
        }
    }
    
    // Converts a JavaCC Token to a Bali AstToken:
    //
    static AstToken t2at (Token tok) {
    
        // Special case -- if token is optional:
        //
        if (tok == null)
            return (null) ;
    
        StringBuffer buffer = new StringBuffer () ;
        Token special = tok.specialToken;
        while (special != null) {
            buffer.insert (0, special.toString()) ;
            special = special.specialToken ;
        }
        String white = buffer.toString () ;
    
        return new AstToken().setParms (white, tok.image, tok.endLine) ;
    }

}

PARSER_END(BaliParser)

//-----------------------------------//
// Token manager declarations:
//-----------------------------------//

// No TOKEN_MGR_DECLS defined in Bali grammar.

//-----------------------------------//
// Standard token definitions:
//-----------------------------------//

SPECIAL_TOKEN : {" "|"\f"|"\n"|"\r"|"\t"}

// COMMENTS:

MORE : {
    "//" : IN_SINGLE_LINE_COMMENT
    | <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
    | "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN : {
    <SINGLE_LINE_COMMENT: "\n" | "\n\r" | "\r" | "\r\n"> : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN : {
    <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN : {
    <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE : { < ~[] > }

TOKEN : {
    <#LETTER: ["a"-"z", "A"-"Z", "_", "$"]>
    | <#DIGIT: ["0"-"9"]>
}

//-----------------------------------//
// Bali tokens from grammar:
//-----------------------------------//

TOKEN : {
    <ABORT: "abort">
    | <ALL: "*">
    | <AND: "and">
    | <BANG: "!">
    | <CLOSE: "close">
    | <COMMA: ",">
    | <COMMIT: "commit">
    | <CREATE: "create">
    | <DELETE: "delete">
    | <DIV: "/">
    | <DOT: ".">
    | <EQ: "=">
    | <EXIT: "exit">
    | <FROM: "from">
    | <GE: ">=">
    | <GT: ">">
    | <INDEX: "index">
    | <INSERT: "insert">
    | <INTEGER: "int">
    | <INTO: "into">
    | <LE: "<=">
    | <LOAD: "load">
    | <LP: "(">
    | <LT: "<">
    | <OPEN: "open">
    | <RP: ")">
    | <SCRIPT: "script">
    | <SELECT: "select">
    | <SEMI: ";">
    | <SET: "set">
    | <SHOW: "show">
    | <STRING: "str">
    | <TABLE: "table">
    | <UPDATE: "update">
    | <VALUES: "values">
    | <WHERE: "where">
}

//-----------------------------------//
// Regular-expression tokens from grammar:
//-----------------------------------//

TOKEN: {
        <STRING_LITERAL:
                "\""
                ( (~["\"","\\","\n","\r"])
                | ("\\"
                    ( ["n","t","b","r","f","\\","'","\""]
                    | ["0"-"7"] ( ["0"-"7"] )?
                    | ["0"-"3"] ["0"-"7"] ["0"-"7"]
                    )
                  )
                )*
                "\""
        > |   
        <INTEGER_LITERAL: (<DIGIT>)+>
}

//-----------------------------------//
// JAVACODE blocks from grammar:
//-----------------------------------//

// No JAVACODE blocks in Bali grammar.

//-----------------------------------//
// Productions from Bali grammar:
//-----------------------------------//

SqlLang SqlLang () : {
    Ddl_stmt dd0=null ;
    Dml_stmt dm0=null ;
} {
    dd0=Ddl_stmt()
    {return (SqlLang) dd0 ;}
    |
    dm0=Dml_stmt()
    {return (SqlLang) dm0 ;}
}

Abort Abort () : {
    Token to1=null, to0=null ;
} {
    to0=<ABORT>
    to1=<SEMI>
    {return new AbortCmd().setParms (t2at(to0), t2at(to1)) ;}
}

Assign Assign () : {
    Field_name fi0=null ;
    Literal li0=null ;
    Token to0=null ;
} {
    fi0=Field_name()
    to0=<EQ>
    li0=Literal()
    {return new Asgn().setParms (fi0, t2at(to0), li0) ;}
}

Assign_list Assign_list () : {
    Assign_list list = new Assign_list () ;
    Assign as0=null ;
    Token to0=null ;
} {
    as0=Assign()
    {list.add (new Assign_listElem().setParms (as0)) ;}
    (
        to0=<COMMA>
        as0=Assign()
        {list.add (new Assign_listElem().setParms (t2at(to0), as0)) ;}
    )*
    {return list ;}
}

Clause Clause () : {
    Field_spec fi1=null, fi0=null ;
    Literal li0=null ;
    Rel re0=null ;
    Token to0=null ;
} {
    LOOKAHEAD( Field_spec() "=" Field_spec()) 
    fi0=Field_spec()
    to0=<EQ>
    fi1=Field_spec()
    {return new JoinClause().setParms (fi0, t2at(to0), fi1) ;}
    |
    fi0=Field_spec()
    re0=Rel()
    li0=Literal()
    {return new SimpleClause().setParms (fi0, re0, li0) ;}
}

Close Close () : {
    Token to1=null, to0=null ;
} {
    to0=<CLOSE>
    to1=<SEMI>
    {return new CloseCmd().setParms (t2at(to0), t2at(to1)) ;}
}

Commit Commit () : {
    Token to1=null, to0=null ;
} {
    to0=<COMMIT>
    to1=<SEMI>
    {return new CommitCmd().setParms (t2at(to0), t2at(to1)) ;}
}

Ddl_stmt Ddl_stmt () : {
    Decl_ind deSs0=null ;
    Decl_rel de0=null ;
    Show sh0=null ;
    Token to0=null ;
} {
    de0=Decl_rel()
    {return (Ddl_stmt) de0 ;}
    |
    deSs0=Decl_ind()
    {return (Ddl_stmt) deSs0 ;}
    |
    sh0=Show()
    {return (Ddl_stmt) sh0 ;}
    |
    to0=<SEMI>
    {return new EmptyStmt().setParms (t2at(to0)) ;}
}

Decl_ind Decl_ind () : {
    Rel_dot_field re0=null ;
    Token to1=null, to0=null ;
} {
    to0=<INDEX>
    re0=Rel_dot_field()
    to1=<SEMI>
    {return new IndxDecl().setParms (t2at(to0), re0, t2at(to1)) ;}
}

Decl_rel Decl_rel () : {
    Fld_decl_list fl0=null ;
    Rel_name re0=null ;
    Token to4=null, to3=null, to2=null, to1=null, to0=null ;
} {
    to0=<CREATE>
    to1=<TABLE>
    re0=Rel_name()
    to2=<LP>
    fl0=Fld_decl_list()
    to3=<RP>
    to4=<SEMI>
    {return new RelDecl().setParms
    (t2at(to0), t2at(to1), re0, t2at(to2), fl0, t2at(to3), t2at(to4)) ;}
}

Delete Delete () : {
    One_rel_pred on0=null ;
    Rel_name re0=null ;
    Token to2=null, to1=null, to0=null ;
} {
    to0=<DELETE>
    re0=Rel_name()
    to1=<WHERE>
    on0=One_rel_pred()
    to2=<SEMI>
    {return new DeleteCmd().setParms
    (t2at(to0), re0, t2at(to1), on0, t2at(to2)) ;}
}

Dml_stmt Dml_stmt () : {
    Abort ab0=null ;
    Close cl0=null ;
    Commit co0=null ;
    Delete de0=null ;
    ExitMDB ex0=null ;
    Insert in0=null ;
    Open op0=null ;
    Script sc0=null ;
    Select se0=null ;
    Update up0=null ;
} {
    ab0=Abort()
    {return (Dml_stmt) ab0 ;}
    |
    cl0=Close()
    {return (Dml_stmt) cl0 ;}
    |
    co0=Commit()
    {return (Dml_stmt) co0 ;}
    |
    de0=Delete()
    {return (Dml_stmt) de0 ;}
    |
    ex0=ExitMDB()
    {return (Dml_stmt) ex0 ;}
    |
    in0=Insert()
    {return (Dml_stmt) in0 ;}
    |
    op0=Open()
    {return (Dml_stmt) op0 ;}
    |
    sc0=Script()
    {return (Dml_stmt) sc0 ;}
    |
    se0=Select()
    {return (Dml_stmt) se0 ;}
    |
    up0=Update()
    {return (Dml_stmt) up0 ;}
}

ExitMDB ExitMDB () : {
    Token to1=null, to0=null ;
} {
    to0=<EXIT>
    to1=<SEMI>
    {return new ExitCmd().setParms (t2at(to0), t2at(to1)) ;}
}

Field_decl Field_decl () : {
    Field_name fi0=null ;
    Field_type fiSs0=null ;
} {
    fi0=Field_name()
    fiSs0=Field_type()
    {return new FieldDecl().setParms (fi0, fiSs0) ;}
}

Field_name Field_name () : {
    Token to0=null ;
} {
    to0=<IDENTIFIER>
    {return new FieldName().setParms (t2at(to0)) ;}
}

Field_spec Field_spec () : {
    Field_name fi0=null ;
    Rel_dot_field re0=null ;
} {
    LOOKAHEAD( Rel_name() ".") re0=Rel_dot_field()
    {return (Field_spec) re0 ;}
    |
    fi0=Field_name()
    {return (Field_spec) fi0 ;}
}

Field_type Field_type () : {
    Token to0=null ;
} {
    to0=<INTEGER>
    {return new IntField().setParms (t2at(to0)) ;}
    |
    to0=<STRING>
    {return new StrField().setParms (t2at(to0)) ;}
}

Fld_decl_list Fld_decl_list () : {
    Fld_decl_list list = new Fld_decl_list () ;
    Field_decl fi0=null ;
    Token to0=null ;
} {
    fi0=Field_decl()
    {list.add (new Fld_decl_listElem().setParms (fi0)) ;}
    (
        to0=<COMMA>
        fi0=Field_decl()
        {list.add (new Fld_decl_listElem().setParms (t2at(to0), fi0)) ;}
    )*
    {return list ;}
}

Insert Insert () : {
    Literal_list li0=null ;
    Rel_name re0=null ;
    Token to5=null, to4=null, to3=null, to2=null, to1=null, to0=null ;
} {
    to0=<INSERT>
    to1=<INTO>
    re0=Rel_name()
    to2=<VALUES>
    to3=<LP>
    li0=Literal_list()
    to4=<RP>
    to5=<SEMI>
    {return new InsertCmd().setParms
    (t2at(to0), t2at(to1), re0, t2at(to2), t2at(to3), li0, t2at(to4), t2at(to5)) ;}
}

Literal Literal () : {
    Token to0=null ;
} {
    to0=<STRING_LITERAL>
    {return new StrLit().setParms (t2at(to0)) ;}
    |
    to0=<INTEGER_LITERAL>
    {return new IntLit().setParms (t2at(to0)) ;}
}

Literal_list Literal_list () : {
    Literal_list list = new Literal_list () ;
    Literal li0=null ;
    Token to0=null ;
} {
    li0=Literal()
    {list.add (new Literal_listElem().setParms (li0)) ;}
    (
        to0=<COMMA>
        li0=Literal()
        {list.add (new Literal_listElem().setParms (t2at(to0), li0)) ;}
    )*
    {return list ;}
}

One_rel_clause One_rel_clause () : {
    Field_name fi0=null ;
    Literal li0=null ;
    Rel re0=null ;
} {
    fi0=Field_name()
    re0=Rel()
    li0=Literal()
    {return new OneRelClause().setParms (fi0, re0, li0) ;}
}

One_rel_pred One_rel_pred () : {
    One_rel_pred list = new One_rel_pred () ;
    One_rel_clause on0=null ;
    Token to0=null ;
} {
    on0=One_rel_clause()
    {list.add (new One_rel_predElem().setParms (on0)) ;}
    (
        to0=<AND>
        on0=One_rel_clause()
        {list.add (new One_rel_predElem().setParms (t2at(to0), on0)) ;}
    )*
    {return list ;}
}

Open Open () : {
    Token to2=null, to1=null, to0=null ;
} {
    to0=<OPEN>
    to1=<STRING_LITERAL>
    to2=<SEMI>
    {return new OpenCmd().setParms (t2at(to0), t2at(to1), t2at(to2)) ;}
}

Pred Pred () : {
    Pred list = new Pred () ;
    Clause cl0=null ;
    Token to0=null ;
} {
    cl0=Clause()
    {list.add (new PredElem().setParms (cl0)) ;}
    (
        to0=<AND>
        cl0=Clause()
        {list.add (new PredElem().setParms (t2at(to0), cl0)) ;}
    )*
    {return list ;}
}

Proj_list Proj_list () : {
    Spec_list sp0=null ;
    Token to0=null ;
} {
    sp0=Spec_list()
    {return new Plist().setParms (sp0) ;}
    |
    to0=<ALL>
    {return new All().setParms (t2at(to0)) ;}
}

Rel Rel () : {
    Token to1=null, to0=null ;
} {
    to0=<EQ>
    {return new Equ().setParms (t2at(to0)) ;}
    |
    to0=<LE>
    {return new Leq().setParms (t2at(to0)) ;}
    |
    to0=<GE>
    {return new Geq().setParms (t2at(to0)) ;}
    |
    to0=<GT>
    {return new Gtr().setParms (t2at(to0)) ;}
    |
    to0=<LT>
    {return new Lss().setParms (t2at(to0)) ;}
    |
    to0=<BANG>
    to1=<EQ>
    {return new Neq().setParms (t2at(to0), t2at(to1)) ;}
}

Rel_dot_field Rel_dot_field () : {
    Field_name fi0=null ;
    Rel_name re0=null ;
    Token to0=null ;
} {
    re0=Rel_name()
    to0=<DOT>
    fi0=Field_name()
    {return new RelDotField().setParms (re0, t2at(to0), fi0) ;}
}

Rel_list Rel_list () : {
    Rel_list list = new Rel_list () ;
    Rel_name re0=null ;
    Token to0=null ;
} {
    re0=Rel_name()
    {list.add (new Rel_listElem().setParms (re0)) ;}
    (
        to0=<COMMA>
        re0=Rel_name()
        {list.add (new Rel_listElem().setParms (t2at(to0), re0)) ;}
    )*
    {return list ;}
}

Rel_name Rel_name () : {
    Token to0=null ;
} {
    to0=<IDENTIFIER>
    {return new RelName().setParms (t2at(to0)) ;}
}

Script Script () : {
    Token to2=null, to1=null, to0=null ;
} {
    to0=<SCRIPT>
    to1=<STRING_LITERAL>
    to2=<SEMI>
    {return new ScriptCmd().setParms (t2at(to0), t2at(to1), t2at(to2)) ;}
}

Select Select () : {
    Proj_list pr0=null ;
    Rel_list re0=null ;
    Token to2=null, to1=null, to0=null ;
    WherePred wh0=null ;
} {
    to0=<SELECT>
    pr0=Proj_list()
    to1=<FROM>
    re0=Rel_list()
    [ wh0=WherePred() ]
    to2=<SEMI>
    {return new SelectCmd().setParms
    (t2at(to0), pr0, t2at(to1), re0, opt(wh0), t2at(to2)) ;}
}

Show Show () : {
    Rel_name re0=null ;
    Token to1=null, to0=null ;
} {
    LOOKAHEAD( "show" ";") 
    to0=<SHOW>
    to1=<SEMI>
    {return new ShowDb().setParms (t2at(to0), t2at(to1)) ;}
    |
    to0=<SHOW>
    re0=Rel_name()
    to1=<SEMI>
    {return new ShowRel().setParms (t2at(to0), re0, t2at(to1)) ;}
}

Spec_list Spec_list () : {
    Spec_list list = new Spec_list () ;
    Field_spec fi0=null ;
    Token to0=null ;
} {
    fi0=Field_spec()
    {list.add (new Spec_listElem().setParms (fi0)) ;}
    (
        to0=<COMMA>
        fi0=Field_spec()
        {list.add (new Spec_listElem().setParms (t2at(to0), fi0)) ;}
    )*
    {return list ;}
}

Update Update () : {
    Assign_list as0=null ;
    One_rel_pred on0=null ;
    Rel_name re0=null ;
    Token to3=null, to2=null, to1=null, to0=null ;
} {
    to0=<UPDATE>
    re0=Rel_name()
    to1=<SET>
    as0=Assign_list()
    to2=<WHERE>
    on0=One_rel_pred()
    to3=<SEMI>
    {return new UpdateCmd().setParms
    (t2at(to0), re0, t2at(to1), as0, t2at(to2), on0, t2at(to3)) ;}
}

WherePred WherePred () : {
    Pred pr0=null ;
    Token to0=null ;
} {
    to0=<WHERE>
    pr0=Pred()
    {return new WherePredStmt().setParms (t2at(to0), pr0) ;}
}

//-----------------------------------//
// Other standard tokens::
//-----------------------------------//

TOKEN : {
    <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
    | <OTHER: ~[]>
}
