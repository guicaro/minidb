// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import Jakarta.util.*;
import java.io.*;
import java.util.*;

import com.sleepycat.je.Cursor;
import com.sleepycat.je.CursorConfig;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;
import com.sleepycat.bind.EntryBinding;
import com.sleepycat.bind.serial.SerialBinding;
import com.sleepycat.bind.serial.StoredClassCatalog;

import util.DBAccess;
import util.GenericTuple;

public class ShowDb extends Show {

	final public static int ARG_LENGTH = 1 /* Kludge! */;
	final public static int TOK_LENGTH = 2;

	public void execute() {

		// List databases in environment

		DBAccess dbInstance = DBAccess.getInstance();

		if (dbInstance.getEnvironment() == null) {
			System.out.println("ERROR: An environment has not been opened");
		} else {
			Database workDb = null;
			Cursor cursor = null;

			// Open the cursor.
			StoredClassCatalog myClassCatalog = dbInstance.getClassCatalog();

			try {

				CursorConfig cfg = new CursorConfig();
				workDb = dbInstance.getDbHandle("metaTable");
				cursor = workDb.openCursor(null, null);

				// Create the "data" binding
				EntryBinding dataBinding = new SerialBinding(myClassCatalog,
						GenericTuple.class);
				GenericTuple retTuple = new GenericTuple();

				// Get the DatabaseEntry objects that the cursor will use.
				DatabaseEntry foundKey = new DatabaseEntry();
				DatabaseEntry foundData = new DatabaseEntry();

				System.out.println("Available Tables:");

				while (cursor.getNext(foundKey, foundData,
						LockMode.READ_UNCOMMITTED) == OperationStatus.SUCCESS) {

					String keyString = new String(foundKey.getData(), "UTF-8");
					System.out.println(keyString);

				}

				if (foundKey.getSize() == 0) {
					System.out.println("There are no tables in system");
				}

				// Cursors must be closed.
				cursor.close();

			} catch (DatabaseException e) {
				System.out.println("Error opening database: " + e.toString());
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}

		super.execute();
	}

	public AstToken getSEMI() {

		return (AstToken) tok[1];
	}

	public AstToken getSHOW() {

		return (AstToken) tok[0];
	}

	public boolean[] printorder() {

		return new boolean[] { true, true };
	}

	public ShowDb setParms(AstToken tok0, AstToken tok1) {

		arg = new AstNode[ARG_LENGTH];
		tok = new AstTokenInterface[TOK_LENGTH];

		tok[0] = tok0; /* SHOW */
		tok[1] = tok1; /* SEMI */

		InitChildren();
		return (ShowDb) this;
	}

}
