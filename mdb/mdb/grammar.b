// Automatically generated Bali code.  Edit at your own risk!
// Generated by "balicomposer" v2003.02.17.

//-----------------------------------//
// Option block:
//-----------------------------------//

// No options blocks in Bali grammar.

//-----------------------------------//
// Parser code block:
//-----------------------------------//

code {
} code

//-----------------------------------//
// Token manager declarations:
//-----------------------------------//

// No TOKEN_MGR_DECLS defined in Bali grammar.

//-----------------------------------//
// Bali tokens:
//-----------------------------------//

"abort"         	ABORT
"*"             	ALL
"and"           	AND
"!"             	BANG
"close"         	CLOSE
","             	COMMA
"commit"        	COMMIT
"create"        	CREATE
"delete"        	DELETE
"/"             	DIV
"."             	DOT
"="             	EQ
"exit"          	EXIT
"from"          	FROM
">="            	GE
">"             	GT
"index"         	INDEX
"insert"        	INSERT
"int"           	INTEGER
"into"          	INTO
"<="            	LE
"load"          	LOAD
"("             	LP
"<"             	LT
"open"          	OPEN
")"             	RP
"script"        	SCRIPT
"select"        	SELECT
";"             	SEMI
"set"           	SET
"show"          	SHOW
"str"           	STRING
"table"         	TABLE
"update"        	UPDATE
"values"        	VALUES
"where"         	WHERE


//-----------------------------------//
// Regular expression tokens:
//-----------------------------------//

TOKEN: {
        <STRING_LITERAL:
                "\""
                ( (~["\"","\\","\n","\r"])
                | ("\\"
                    ( ["n","t","b","r","f","\\","'","\""]
                    | ["0"-"7"] ( ["0"-"7"] )?
                    | ["0"-"3"] ["0"-"7"] ["0"-"7"]
                    )
                  )
                )*
                "\""
        > |  
        <INTEGER_LITERAL: (<DIGIT>)+>
}


//-----------------------------------//
// Java code blocks:
//-----------------------------------//

// No JAVACODE blocks in Bali grammar.

//-----------------------------------//
// Bali productions:
//-----------------------------------//

SqlLang
	:  Ddl_stmt
	|  Dml_stmt
	;

Abort
	:  ABORT SEMI             ::AbortCmd
	;

Assign
	:  Field_name EQ Literal  ::Asgn
	;

Assign_list
	:  Assign ( COMMA Assign)*
	;

Clause
	:  LOOKAHEAD( Field_spec() "=" Field_spec() )
                 Field_spec EQ Field_spec       ::JoinClause
	|  Field_spec Rel Literal         ::SimpleClause
	;

Close
	:  CLOSE SEMI             ::CloseCmd
	;

Commit
	:  COMMIT SEMI            ::CommitCmd
	;

Ddl_stmt
	:  Decl_rel
	|  Decl_ind
	|  Show
	|  SEMI                   ::EmptyStmt
	;

Decl_ind
	:  INDEX Rel_dot_field SEMI       ::IndxDecl
	;

Decl_rel
	:  CREATE TABLE Rel_name LP Fld_decl_list RP SEMI
                                                ::RelDecl
	;

Delete
	:  DELETE Rel_name WHERE One_rel_pred SEMI   ::DeleteCmd
	;

Dml_stmt
	:  Abort
	|  Close
	|  Commit
	|  Delete
	|  ExitMDB
	|  Insert
	|  Open
	|  Script
	|  Select
	|  Update
	;

ExitMDB
	:  EXIT SEMI              ::ExitCmd
	;

Field_decl
	:  Field_name Field_type ::FieldDecl
	;

Field_name
	:  IDENTIFIER             ::FieldName
	;

Field_spec
	:  LOOKAHEAD ( Rel_name() "." ) 
                 Rel_dot_field
	|  Field_name
	;

Field_type
	:  INTEGER                        ::IntField
	|  STRING                         ::StrField
	;

Fld_decl_list
	:  Field_decl ( COMMA Field_decl )*
	;

Insert
	:  INSERT INTO Rel_name VALUES 
                 LP Literal_list RP SEMI                 ::InsertCmd
	;

Literal
	:  STRING_LITERAL         ::StrLit
	|  INTEGER_LITERAL	       ::IntLit
	;

Literal_list
	:  Literal ( COMMA Literal )*
	;

One_rel_clause
	:  Field_name Rel Literal ::OneRelClause
	;

One_rel_pred
	:  One_rel_clause ( AND One_rel_clause )*
	;

Open
	:  OPEN STRING_LITERAL SEMI   ::OpenCmd
	;

Pred
	:  Clause  ( AND Clause)*
	;

Proj_list
	:  Spec_list              ::Plist
	|  ALL                    ::All
	;

Rel
	:  EQ                     ::Equ
	|  LE                     ::Leq
	|  GE                     ::Geq
	|  GT                     ::Gtr
	|  LT                     ::Lss
	|  BANG EQ                ::Neq
	;

Rel_dot_field
	: Rel_name DOT Field_name ::RelDotField
	;

Rel_list
	:  Rel_name ( COMMA Rel_name )*
	;

Rel_name
	:  IDENTIFIER             ::RelName
	;

Script
	:  SCRIPT STRING_LITERAL SEMI    ::ScriptCmd
	;

Select
	:  SELECT Proj_list FROM Rel_list [WherePred] SEMI
                                        ::SelectCmd
	;

Show
	:  LOOKAHEAD( "show" ";" )
                 SHOW SEMI                      ::ShowDb
	|  SHOW Rel_name SEMI             ::ShowRel
	;

Spec_list
	:  Field_spec ( COMMA Field_spec )*
	;

Update
	:  UPDATE Rel_name SET Assign_list WHERE One_rel_pred SEMI
                                        ::UpdateCmd
	;

WherePred
	: WHERE Pred     ::WherePredStmt
	;
