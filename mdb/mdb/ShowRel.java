// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import Jakarta.util.*;
import java.io.*;
import java.util.*;

import com.sleepycat.je.Database;
import com.sleepycat.je.LockMode;

import util.DBAccess;
import util.GenericTuple;

public class ShowRel extends Show {

	final public static int ARG_LENGTH = 1;
	final public static int TOK_LENGTH = 2;

	public void execute() {

		// Show schema information for a database

		DBAccess dbInstance = DBAccess.getInstance();

		if (dbInstance.getEnvironment() == null) {
			System.out.println("ERROR: An environment has not been opened");
		} else {
			String relName = getRel_name().toString().trim();
			Database metaDb = null;
			Database workDb = null;

			// Search the "metaTable" table for a record using the
			// table name specified in the query as the "key"
			String searchKey = relName;
			GenericTuple schemaTuple = new GenericTuple();

			// Get a DB Handle and retrieve information.
			metaDb = dbInstance.getDbHandle("metaTable");

			schemaTuple = dbInstance.retrieve(searchKey, metaDb, null,
					LockMode.READ_UNCOMMITTED);
			Vector<String> columnInfo = new Vector<String>();

			if (!(schemaTuple == null)) {
				// Retrieve schema information for specified table
				columnInfo = (Vector) schemaTuple.getTuple().clone();
			}

			// Check if such an entry exists (table specified exists)
			if (!columnInfo.isEmpty()) {
				
				StringBuilder sb = new StringBuilder();
				Formatter formatter = new Formatter(sb, Locale.US);
				
				System.out.println("Schema for table " + relName + ":");
				
				sb.append("\n");
			    sb.append("|");
			    formatter.format("%1$-25s %4$1s %2$-25s %4$1s %3$-25s %4$1s", "Column", "Type", "Indexed", "|");
			    sb.append("\n");
			    
			    for (int s = 0; s < columnInfo.size(); s += 3) {
					
			    	sb.append("|");
					formatter.format("%1$-25s %4$1s %2$-25s %4$1s %3$-25s %4$1s", columnInfo.elementAt(s), columnInfo.elementAt(s+1), columnInfo.elementAt(s+2), "|");
					sb.append("\n");
				}
				
				System.out.print(sb);
				
			} else {
				System.out.println("ERROR: Table " + relName
						+ " does not exist");
			}

		}

		super.execute();
	}

	public Rel_name getRel_name() {

		return (Rel_name) arg[0];
	}

	public AstToken getSEMI() {

		return (AstToken) tok[1];
	}

	public AstToken getSHOW() {

		return (AstToken) tok[0];
	}

	public boolean[] printorder() {

		return new boolean[] { true, false, true };
	}

	public ShowRel setParms(AstToken tok0, Rel_name arg0, AstToken tok1) {

		arg = new AstNode[ARG_LENGTH];
		tok = new AstTokenInterface[TOK_LENGTH];

		tok[0] = tok0; /* SHOW */
		arg[0] = arg0; /* Rel_name */
		tok[1] = tok1; /* SEMI */

		InitChildren();
		return (ShowRel) this;
	}

}
