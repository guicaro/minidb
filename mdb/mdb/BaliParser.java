/* Generated By:JavaCC: Do not edit this line. BaliParser.java */
package mdb ;

public class BaliParser implements BaliParserConstants {

    private static SqlLang parseRoot = null ;

    public static SqlLang getStartRoot () {
        return parseRoot ;
    }

    public static SqlLang getStartRoot (BaliParser parser)
    throws ParseException {
        try {
            parseRoot = parser.SqlLang () ;
            parser.requireEOF () ;
            return parseRoot ;
        } catch (TokenMgrError error) {
            ParseException e = new ParseException
            ("token error occurred") ;
            e.initCause (error) ;
            throw e ;
        }
    }

    // Wraps an optional node around an AstNode:
    //
    static AstOptNode opt (AstNode node) {
        return new AstOptNode () . setParms (node) ;
    }

    // Wraps an optional node around an AstToken:
    //
    static AstOptToken opt (AstToken token) {
        return new AstOptToken () . setParms (token) ;
    }

    // Forces an end-of-file check in the tokenStream:
    //
    public void requireEOF () throws ParseException {
        try {
            jj_consume_token (BaliParserConstants.EOF) ;
        } catch (TokenMgrError error) {
            ParseException e = new ParseException ("EOF error") ;
            e.initCause (error) ;
            throw e ;
        }
    }

    // Converts a JavaCC Token to a Bali AstToken:
    //
    static AstToken t2at (Token tok) {

        // Special case -- if token is optional:
        //
        if (tok == null)
            return (null) ;

        StringBuffer buffer = new StringBuffer () ;
        Token special = tok.specialToken;
        while (special != null) {
            buffer.insert (0, special.toString()) ;
            special = special.specialToken ;
        }
        String white = buffer.toString () ;

        return new AstToken().setParms (white, tok.image, tok.endLine) ;
    }

//-----------------------------------//
// JAVACODE blocks from grammar:
//-----------------------------------//

// No JAVACODE blocks in Bali grammar.

//-----------------------------------//
// Productions from Bali grammar:
//-----------------------------------//
  static final public SqlLang SqlLang() throws ParseException {
    Ddl_stmt dd0=null ;
    Dml_stmt dm0=null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
    case INDEX:
    case SEMI:
    case SHOW:
      dd0 = Ddl_stmt();
     {if (true) return (SqlLang) dd0 ;}
      break;
    case ABORT:
    case CLOSE:
    case COMMIT:
    case DELETE:
    case EXIT:
    case INSERT:
    case OPEN:
    case SCRIPT:
    case SELECT:
    case UPDATE:
      dm0 = Dml_stmt();
     {if (true) return (SqlLang) dm0 ;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Abort Abort() throws ParseException {
    Token to1=null, to0=null ;
    to0 = jj_consume_token(ABORT);
    to1 = jj_consume_token(SEMI);
     {if (true) return new AbortCmd().setParms (t2at(to0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Assign Assign() throws ParseException {
    Field_name fi0=null ;
    Literal li0=null ;
    Token to0=null ;
    fi0 = Field_name();
    to0 = jj_consume_token(EQ);
    li0 = Literal();
     {if (true) return new Asgn().setParms (fi0, t2at(to0), li0) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Assign_list Assign_list() throws ParseException {
    Assign_list list = new Assign_list () ;
    Assign as0=null ;
    Token to0=null ;
    as0 = Assign();
     list.add (new Assign_listElem().setParms (as0)) ;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      to0 = jj_consume_token(COMMA);
      as0 = Assign();
         list.add (new Assign_listElem().setParms (t2at(to0), as0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  static final public Clause Clause() throws ParseException {
    Field_spec fi1=null, fi0=null ;
    Literal li0=null ;
    Rel re0=null ;
    Token to0=null ;
    if (jj_2_1(2147483647)) {
      fi0 = Field_spec();
      to0 = jj_consume_token(EQ);
      fi1 = Field_spec();
     {if (true) return new JoinClause().setParms (fi0, t2at(to0), fi1) ;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        fi0 = Field_spec();
        re0 = Rel();
        li0 = Literal();
     {if (true) return new SimpleClause().setParms (fi0, re0, li0) ;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Close Close() throws ParseException {
    Token to1=null, to0=null ;
    to0 = jj_consume_token(CLOSE);
    to1 = jj_consume_token(SEMI);
     {if (true) return new CloseCmd().setParms (t2at(to0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Commit Commit() throws ParseException {
    Token to1=null, to0=null ;
    to0 = jj_consume_token(COMMIT);
    to1 = jj_consume_token(SEMI);
     {if (true) return new CommitCmd().setParms (t2at(to0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Ddl_stmt Ddl_stmt() throws ParseException {
    Decl_ind deSs0=null ;
    Decl_rel de0=null ;
    Show sh0=null ;
    Token to0=null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      de0 = Decl_rel();
     {if (true) return (Ddl_stmt) de0 ;}
      break;
    case INDEX:
      deSs0 = Decl_ind();
     {if (true) return (Ddl_stmt) deSs0 ;}
      break;
    case SHOW:
      sh0 = Show();
     {if (true) return (Ddl_stmt) sh0 ;}
      break;
    case SEMI:
      to0 = jj_consume_token(SEMI);
     {if (true) return new EmptyStmt().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Decl_ind Decl_ind() throws ParseException {
    Rel_dot_field re0=null ;
    Token to1=null, to0=null ;
    to0 = jj_consume_token(INDEX);
    re0 = Rel_dot_field();
    to1 = jj_consume_token(SEMI);
     {if (true) return new IndxDecl().setParms (t2at(to0), re0, t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Decl_rel Decl_rel() throws ParseException {
    Fld_decl_list fl0=null ;
    Rel_name re0=null ;
    Token to4=null, to3=null, to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(CREATE);
    to1 = jj_consume_token(TABLE);
    re0 = Rel_name();
    to2 = jj_consume_token(LP);
    fl0 = Fld_decl_list();
    to3 = jj_consume_token(RP);
    to4 = jj_consume_token(SEMI);
     {if (true) return new RelDecl().setParms
    (t2at(to0), t2at(to1), re0, t2at(to2), fl0, t2at(to3), t2at(to4)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Delete Delete() throws ParseException {
    One_rel_pred on0=null ;
    Rel_name re0=null ;
    Token to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(DELETE);
    re0 = Rel_name();
    to1 = jj_consume_token(WHERE);
    on0 = One_rel_pred();
    to2 = jj_consume_token(SEMI);
     {if (true) return new DeleteCmd().setParms
    (t2at(to0), re0, t2at(to1), on0, t2at(to2)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Dml_stmt Dml_stmt() throws ParseException {
    Abort ab0=null ;
    Close cl0=null ;
    Commit co0=null ;
    Delete de0=null ;
    ExitMDB ex0=null ;
    Insert in0=null ;
    Open op0=null ;
    Script sc0=null ;
    Select se0=null ;
    Update up0=null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABORT:
      ab0 = Abort();
     {if (true) return (Dml_stmt) ab0 ;}
      break;
    case CLOSE:
      cl0 = Close();
     {if (true) return (Dml_stmt) cl0 ;}
      break;
    case COMMIT:
      co0 = Commit();
     {if (true) return (Dml_stmt) co0 ;}
      break;
    case DELETE:
      de0 = Delete();
     {if (true) return (Dml_stmt) de0 ;}
      break;
    case EXIT:
      ex0 = ExitMDB();
     {if (true) return (Dml_stmt) ex0 ;}
      break;
    case INSERT:
      in0 = Insert();
     {if (true) return (Dml_stmt) in0 ;}
      break;
    case OPEN:
      op0 = Open();
     {if (true) return (Dml_stmt) op0 ;}
      break;
    case SCRIPT:
      sc0 = Script();
     {if (true) return (Dml_stmt) sc0 ;}
      break;
    case SELECT:
      se0 = Select();
     {if (true) return (Dml_stmt) se0 ;}
      break;
    case UPDATE:
      up0 = Update();
     {if (true) return (Dml_stmt) up0 ;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExitMDB ExitMDB() throws ParseException {
    Token to1=null, to0=null ;
    to0 = jj_consume_token(EXIT);
    to1 = jj_consume_token(SEMI);
     {if (true) return new ExitCmd().setParms (t2at(to0), t2at(to1)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Field_decl Field_decl() throws ParseException {
    Field_name fi0=null ;
    Field_type fiSs0=null ;
    fi0 = Field_name();
    fiSs0 = Field_type();
     {if (true) return new FieldDecl().setParms (fi0, fiSs0) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Field_name Field_name() throws ParseException {
    Token to0=null ;
    to0 = jj_consume_token(IDENTIFIER);
     {if (true) return new FieldName().setParms (t2at(to0)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Field_spec Field_spec() throws ParseException {
    Field_name fi0=null ;
    Rel_dot_field re0=null ;
    if (jj_2_2(2147483647)) {
      re0 = Rel_dot_field();
     {if (true) return (Field_spec) re0 ;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        fi0 = Field_name();
     {if (true) return (Field_spec) fi0 ;}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Field_type Field_type() throws ParseException {
    Token to0=null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      to0 = jj_consume_token(INTEGER);
     {if (true) return new IntField().setParms (t2at(to0)) ;}
      break;
    case STRING:
      to0 = jj_consume_token(STRING);
     {if (true) return new StrField().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Fld_decl_list Fld_decl_list() throws ParseException {
    Fld_decl_list list = new Fld_decl_list () ;
    Field_decl fi0=null ;
    Token to0=null ;
    fi0 = Field_decl();
     list.add (new Fld_decl_listElem().setParms (fi0)) ;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      to0 = jj_consume_token(COMMA);
      fi0 = Field_decl();
         list.add (new Fld_decl_listElem().setParms (t2at(to0), fi0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  static final public Insert Insert() throws ParseException {
    Literal_list li0=null ;
    Rel_name re0=null ;
    Token to5=null, to4=null, to3=null, to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(INSERT);
    to1 = jj_consume_token(INTO);
    re0 = Rel_name();
    to2 = jj_consume_token(VALUES);
    to3 = jj_consume_token(LP);
    li0 = Literal_list();
    to4 = jj_consume_token(RP);
    to5 = jj_consume_token(SEMI);
     {if (true) return new InsertCmd().setParms
    (t2at(to0), t2at(to1), re0, t2at(to2), t2at(to3), li0, t2at(to4), t2at(to5)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Literal Literal() throws ParseException {
    Token to0=null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      to0 = jj_consume_token(STRING_LITERAL);
     {if (true) return new StrLit().setParms (t2at(to0)) ;}
      break;
    case INTEGER_LITERAL:
      to0 = jj_consume_token(INTEGER_LITERAL);
     {if (true) return new IntLit().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Literal_list Literal_list() throws ParseException {
    Literal_list list = new Literal_list () ;
    Literal li0=null ;
    Token to0=null ;
    li0 = Literal();
     list.add (new Literal_listElem().setParms (li0)) ;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      to0 = jj_consume_token(COMMA);
      li0 = Literal();
         list.add (new Literal_listElem().setParms (t2at(to0), li0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  static final public One_rel_clause One_rel_clause() throws ParseException {
    Field_name fi0=null ;
    Literal li0=null ;
    Rel re0=null ;
    fi0 = Field_name();
    re0 = Rel();
    li0 = Literal();
     {if (true) return new OneRelClause().setParms (fi0, re0, li0) ;}
    throw new Error("Missing return statement in function");
  }

  static final public One_rel_pred One_rel_pred() throws ParseException {
    One_rel_pred list = new One_rel_pred () ;
    One_rel_clause on0=null ;
    Token to0=null ;
    on0 = One_rel_clause();
     list.add (new One_rel_predElem().setParms (on0)) ;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      to0 = jj_consume_token(AND);
      on0 = One_rel_clause();
         list.add (new One_rel_predElem().setParms (t2at(to0), on0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  static final public Open Open() throws ParseException {
    Token to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(OPEN);
    to1 = jj_consume_token(STRING_LITERAL);
    to2 = jj_consume_token(SEMI);
     {if (true) return new OpenCmd().setParms (t2at(to0), t2at(to1), t2at(to2)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Pred Pred() throws ParseException {
    Pred list = new Pred () ;
    Clause cl0=null ;
    Token to0=null ;
    cl0 = Clause();
     list.add (new PredElem().setParms (cl0)) ;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      to0 = jj_consume_token(AND);
      cl0 = Clause();
         list.add (new PredElem().setParms (t2at(to0), cl0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  static final public Proj_list Proj_list() throws ParseException {
    Spec_list sp0=null ;
    Token to0=null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      sp0 = Spec_list();
     {if (true) return new Plist().setParms (sp0) ;}
      break;
    case ALL:
      to0 = jj_consume_token(ALL);
     {if (true) return new All().setParms (t2at(to0)) ;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Rel Rel() throws ParseException {
    Token to1=null, to0=null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      to0 = jj_consume_token(EQ);
     {if (true) return new Equ().setParms (t2at(to0)) ;}
      break;
    case LE:
      to0 = jj_consume_token(LE);
     {if (true) return new Leq().setParms (t2at(to0)) ;}
      break;
    case GE:
      to0 = jj_consume_token(GE);
     {if (true) return new Geq().setParms (t2at(to0)) ;}
      break;
    case GT:
      to0 = jj_consume_token(GT);
     {if (true) return new Gtr().setParms (t2at(to0)) ;}
      break;
    case LT:
      to0 = jj_consume_token(LT);
     {if (true) return new Lss().setParms (t2at(to0)) ;}
      break;
    case BANG:
      to0 = jj_consume_token(BANG);
      to1 = jj_consume_token(EQ);
     {if (true) return new Neq().setParms (t2at(to0), t2at(to1)) ;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Rel_dot_field Rel_dot_field() throws ParseException {
    Field_name fi0=null ;
    Rel_name re0=null ;
    Token to0=null ;
    re0 = Rel_name();
    to0 = jj_consume_token(DOT);
    fi0 = Field_name();
     {if (true) return new RelDotField().setParms (re0, t2at(to0), fi0) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Rel_list Rel_list() throws ParseException {
    Rel_list list = new Rel_list () ;
    Rel_name re0=null ;
    Token to0=null ;
    re0 = Rel_name();
     list.add (new Rel_listElem().setParms (re0)) ;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      to0 = jj_consume_token(COMMA);
      re0 = Rel_name();
         list.add (new Rel_listElem().setParms (t2at(to0), re0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  static final public Rel_name Rel_name() throws ParseException {
    Token to0=null ;
    to0 = jj_consume_token(IDENTIFIER);
     {if (true) return new RelName().setParms (t2at(to0)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Script Script() throws ParseException {
    Token to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(SCRIPT);
    to1 = jj_consume_token(STRING_LITERAL);
    to2 = jj_consume_token(SEMI);
     {if (true) return new ScriptCmd().setParms (t2at(to0), t2at(to1), t2at(to2)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Select Select() throws ParseException {
    Proj_list pr0=null ;
    Rel_list re0=null ;
    Token to2=null, to1=null, to0=null ;
    WherePred wh0=null ;
    to0 = jj_consume_token(SELECT);
    pr0 = Proj_list();
    to1 = jj_consume_token(FROM);
    re0 = Rel_list();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      wh0 = WherePred();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    to2 = jj_consume_token(SEMI);
     {if (true) return new SelectCmd().setParms
    (t2at(to0), pr0, t2at(to1), re0, opt(wh0), t2at(to2)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public Show Show() throws ParseException {
    Rel_name re0=null ;
    Token to1=null, to0=null ;
    if (jj_2_3(2147483647)) {
      to0 = jj_consume_token(SHOW);
      to1 = jj_consume_token(SEMI);
     {if (true) return new ShowDb().setParms (t2at(to0), t2at(to1)) ;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHOW:
        to0 = jj_consume_token(SHOW);
        re0 = Rel_name();
        to1 = jj_consume_token(SEMI);
     {if (true) return new ShowRel().setParms (t2at(to0), re0, t2at(to1)) ;}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Spec_list Spec_list() throws ParseException {
    Spec_list list = new Spec_list () ;
    Field_spec fi0=null ;
    Token to0=null ;
    fi0 = Field_spec();
     list.add (new Spec_listElem().setParms (fi0)) ;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      to0 = jj_consume_token(COMMA);
      fi0 = Field_spec();
         list.add (new Spec_listElem().setParms (t2at(to0), fi0)) ;
    }
     {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  static final public Update Update() throws ParseException {
    Assign_list as0=null ;
    One_rel_pred on0=null ;
    Rel_name re0=null ;
    Token to3=null, to2=null, to1=null, to0=null ;
    to0 = jj_consume_token(UPDATE);
    re0 = Rel_name();
    to1 = jj_consume_token(SET);
    as0 = Assign_list();
    to2 = jj_consume_token(WHERE);
    on0 = One_rel_pred();
    to3 = jj_consume_token(SEMI);
     {if (true) return new UpdateCmd().setParms
    (t2at(to0), re0, t2at(to1), as0, t2at(to2), on0, t2at(to3)) ;}
    throw new Error("Missing return statement in function");
  }

  static final public WherePred WherePred() throws ParseException {
    Pred pr0=null ;
    Token to0=null ;
    to0 = jj_consume_token(WHERE);
    pr0 = Pred();
     {if (true) return new WherePredStmt().setParms (t2at(to0), pr0) ;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_3R_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static final private boolean jj_3R_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_11() {
    if (jj_3R_13()) return true;
    return false;
  }

  static final private boolean jj_3R_12() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_scan_token(SHOW)) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public BaliParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x88e88000,0x100000,0x0,0x80400000,0x8a88000,0x0,0x0,0x100000,0x0,0x100000,0x20000,0x20000,0x10000,0x64040000,0x100000,0x0,0x0,0x100000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x12e81,0x0,0x200000,0x2800,0x10681,0x200000,0x4002,0x0,0x180000,0x0,0x0,0x0,0x200000,0x48,0x0,0x40000,0x2000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public BaliParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public BaliParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BaliParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BaliParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BaliParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BaliParser(BaliParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(BaliParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[55];
    for (int i = 0; i < 55; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
